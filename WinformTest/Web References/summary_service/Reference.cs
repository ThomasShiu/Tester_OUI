//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.18408
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.VSDesigner 4.0.30319.18408 版自动生成。
// 
#pragma warning disable 1591

namespace WinformTest.summary_service {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="TestSummary_ServiceSoap", Namespace="http://tempuri.org/")]
    public partial class TestSummary_Service : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback RecordTestSummaryLogOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetHardBinAndSoftBinTableOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateRejectDataToCamstarOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLotAttributeOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadTestResultOperationCompleted;
        
        private System.Threading.SendOrPostCallback HoldLotOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetInsertionQtyOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateCamstarStatusOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public TestSummary_Service() {
            this.Url = global::WinformTest.Properties.Settings.Default.WinformTest_summary_service_TestSummary_Service;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event RecordTestSummaryLogCompletedEventHandler RecordTestSummaryLogCompleted;
        
        /// <remarks/>
        public event GetHardBinAndSoftBinTableCompletedEventHandler GetHardBinAndSoftBinTableCompleted;
        
        /// <remarks/>
        public event UpdateRejectDataToCamstarCompletedEventHandler UpdateRejectDataToCamstarCompleted;
        
        /// <remarks/>
        public event GetLotAttributeCompletedEventHandler GetLotAttributeCompleted;
        
        /// <remarks/>
        public event UploadTestResultCompletedEventHandler UploadTestResultCompleted;
        
        /// <remarks/>
        public event HoldLotCompletedEventHandler HoldLotCompleted;
        
        /// <remarks/>
        public event GetInsertionQtyCompletedEventHandler GetInsertionQtyCompleted;
        
        /// <remarks/>
        public event UpdateCamstarStatusCompletedEventHandler UpdateCamstarStatusCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RecordTestSummaryLog", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int RecordTestSummaryLog(string sLotNo, string sTester, string sItemName, System.DateTime tTestStartTime, System.DateTime tTestEndTime, int iTotalTestCount, int iTotalGoodCount, string sFileName) {
            object[] results = this.Invoke("RecordTestSummaryLog", new object[] {
                        sLotNo,
                        sTester,
                        sItemName,
                        tTestStartTime,
                        tTestEndTime,
                        iTotalTestCount,
                        iTotalGoodCount,
                        sFileName});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void RecordTestSummaryLogAsync(string sLotNo, string sTester, string sItemName, System.DateTime tTestStartTime, System.DateTime tTestEndTime, int iTotalTestCount, int iTotalGoodCount, string sFileName) {
            this.RecordTestSummaryLogAsync(sLotNo, sTester, sItemName, tTestStartTime, tTestEndTime, iTotalTestCount, iTotalGoodCount, sFileName, null);
        }
        
        /// <remarks/>
        public void RecordTestSummaryLogAsync(string sLotNo, string sTester, string sItemName, System.DateTime tTestStartTime, System.DateTime tTestEndTime, int iTotalTestCount, int iTotalGoodCount, string sFileName, object userState) {
            if ((this.RecordTestSummaryLogOperationCompleted == null)) {
                this.RecordTestSummaryLogOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRecordTestSummaryLogOperationCompleted);
            }
            this.InvokeAsync("RecordTestSummaryLog", new object[] {
                        sLotNo,
                        sTester,
                        sItemName,
                        tTestStartTime,
                        tTestEndTime,
                        iTotalTestCount,
                        iTotalGoodCount,
                        sFileName}, this.RecordTestSummaryLogOperationCompleted, userState);
        }
        
        private void OnRecordTestSummaryLogOperationCompleted(object arg) {
            if ((this.RecordTestSummaryLogCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RecordTestSummaryLogCompleted(this, new RecordTestSummaryLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetHardBinAndSoftBinTable", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetHardBinAndSoftBinTable(string deviceid, string mctype) {
            object[] results = this.Invoke("GetHardBinAndSoftBinTable", new object[] {
                        deviceid,
                        mctype});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetHardBinAndSoftBinTableAsync(string deviceid, string mctype) {
            this.GetHardBinAndSoftBinTableAsync(deviceid, mctype, null);
        }
        
        /// <remarks/>
        public void GetHardBinAndSoftBinTableAsync(string deviceid, string mctype, object userState) {
            if ((this.GetHardBinAndSoftBinTableOperationCompleted == null)) {
                this.GetHardBinAndSoftBinTableOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetHardBinAndSoftBinTableOperationCompleted);
            }
            this.InvokeAsync("GetHardBinAndSoftBinTable", new object[] {
                        deviceid,
                        mctype}, this.GetHardBinAndSoftBinTableOperationCompleted, userState);
        }
        
        private void OnGetHardBinAndSoftBinTableOperationCompleted(object arg) {
            if ((this.GetHardBinAndSoftBinTableCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetHardBinAndSoftBinTableCompleted(this, new GetHardBinAndSoftBinTableCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateRejectDataToCamstar", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UpdateRejectDataToCamstar(string sLotNo, string equipment, string[] testBins) {
            object[] results = this.Invoke("UpdateRejectDataToCamstar", new object[] {
                        sLotNo,
                        equipment,
                        testBins});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateRejectDataToCamstarAsync(string sLotNo, string equipment, string[] testBins) {
            this.UpdateRejectDataToCamstarAsync(sLotNo, equipment, testBins, null);
        }
        
        /// <remarks/>
        public void UpdateRejectDataToCamstarAsync(string sLotNo, string equipment, string[] testBins, object userState) {
            if ((this.UpdateRejectDataToCamstarOperationCompleted == null)) {
                this.UpdateRejectDataToCamstarOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateRejectDataToCamstarOperationCompleted);
            }
            this.InvokeAsync("UpdateRejectDataToCamstar", new object[] {
                        sLotNo,
                        equipment,
                        testBins}, this.UpdateRejectDataToCamstarOperationCompleted, userState);
        }
        
        private void OnUpdateRejectDataToCamstarOperationCompleted(object arg) {
            if ((this.UpdateRejectDataToCamstarCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateRejectDataToCamstarCompleted(this, new UpdateRejectDataToCamstarCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetLotAttribute", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetLotAttribute(string lotno) {
            object[] results = this.Invoke("GetLotAttribute", new object[] {
                        lotno});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetLotAttributeAsync(string lotno) {
            this.GetLotAttributeAsync(lotno, null);
        }
        
        /// <remarks/>
        public void GetLotAttributeAsync(string lotno, object userState) {
            if ((this.GetLotAttributeOperationCompleted == null)) {
                this.GetLotAttributeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLotAttributeOperationCompleted);
            }
            this.InvokeAsync("GetLotAttribute", new object[] {
                        lotno}, this.GetLotAttributeOperationCompleted, userState);
        }
        
        private void OnGetLotAttributeOperationCompleted(object arg) {
            if ((this.GetLotAttributeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLotAttributeCompleted(this, new GetLotAttributeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UploadTestResult", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UploadTestResult(string mcno, string lotno, string softbins, string hardbins) {
            object[] results = this.Invoke("UploadTestResult", new object[] {
                        mcno,
                        lotno,
                        softbins,
                        hardbins});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UploadTestResultAsync(string mcno, string lotno, string softbins, string hardbins) {
            this.UploadTestResultAsync(mcno, lotno, softbins, hardbins, null);
        }
        
        /// <remarks/>
        public void UploadTestResultAsync(string mcno, string lotno, string softbins, string hardbins, object userState) {
            if ((this.UploadTestResultOperationCompleted == null)) {
                this.UploadTestResultOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadTestResultOperationCompleted);
            }
            this.InvokeAsync("UploadTestResult", new object[] {
                        mcno,
                        lotno,
                        softbins,
                        hardbins}, this.UploadTestResultOperationCompleted, userState);
        }
        
        private void OnUploadTestResultOperationCompleted(object arg) {
            if ((this.UploadTestResultCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadTestResultCompleted(this, new UploadTestResultCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/HoldLot", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool HoldLot(string lotno, string holdreason) {
            object[] results = this.Invoke("HoldLot", new object[] {
                        lotno,
                        holdreason});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void HoldLotAsync(string lotno, string holdreason) {
            this.HoldLotAsync(lotno, holdreason, null);
        }
        
        /// <remarks/>
        public void HoldLotAsync(string lotno, string holdreason, object userState) {
            if ((this.HoldLotOperationCompleted == null)) {
                this.HoldLotOperationCompleted = new System.Threading.SendOrPostCallback(this.OnHoldLotOperationCompleted);
            }
            this.InvokeAsync("HoldLot", new object[] {
                        lotno,
                        holdreason}, this.HoldLotOperationCompleted, userState);
        }
        
        private void OnHoldLotOperationCompleted(object arg) {
            if ((this.HoldLotCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.HoldLotCompleted(this, new HoldLotCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetInsertionQty", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetInsertionQty(string lotno) {
            object[] results = this.Invoke("GetInsertionQty", new object[] {
                        lotno});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetInsertionQtyAsync(string lotno) {
            this.GetInsertionQtyAsync(lotno, null);
        }
        
        /// <remarks/>
        public void GetInsertionQtyAsync(string lotno, object userState) {
            if ((this.GetInsertionQtyOperationCompleted == null)) {
                this.GetInsertionQtyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetInsertionQtyOperationCompleted);
            }
            this.InvokeAsync("GetInsertionQty", new object[] {
                        lotno}, this.GetInsertionQtyOperationCompleted, userState);
        }
        
        private void OnGetInsertionQtyOperationCompleted(object arg) {
            if ((this.GetInsertionQtyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetInsertionQtyCompleted(this, new GetInsertionQtyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateCamstarStatus", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpdateCamstarStatus(string equipment, string status) {
            object[] results = this.Invoke("UpdateCamstarStatus", new object[] {
                        equipment,
                        status});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateCamstarStatusAsync(string equipment, string status) {
            this.UpdateCamstarStatusAsync(equipment, status, null);
        }
        
        /// <remarks/>
        public void UpdateCamstarStatusAsync(string equipment, string status, object userState) {
            if ((this.UpdateCamstarStatusOperationCompleted == null)) {
                this.UpdateCamstarStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateCamstarStatusOperationCompleted);
            }
            this.InvokeAsync("UpdateCamstarStatus", new object[] {
                        equipment,
                        status}, this.UpdateCamstarStatusOperationCompleted, userState);
        }
        
        private void OnUpdateCamstarStatusOperationCompleted(object arg) {
            if ((this.UpdateCamstarStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateCamstarStatusCompleted(this, new UpdateCamstarStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void RecordTestSummaryLogCompletedEventHandler(object sender, RecordTestSummaryLogCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RecordTestSummaryLogCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RecordTestSummaryLogCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetHardBinAndSoftBinTableCompletedEventHandler(object sender, GetHardBinAndSoftBinTableCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetHardBinAndSoftBinTableCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetHardBinAndSoftBinTableCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void UpdateRejectDataToCamstarCompletedEventHandler(object sender, UpdateRejectDataToCamstarCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateRejectDataToCamstarCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateRejectDataToCamstarCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetLotAttributeCompletedEventHandler(object sender, GetLotAttributeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLotAttributeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLotAttributeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void UploadTestResultCompletedEventHandler(object sender, UploadTestResultCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadTestResultCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadTestResultCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void HoldLotCompletedEventHandler(object sender, HoldLotCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HoldLotCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal HoldLotCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetInsertionQtyCompletedEventHandler(object sender, GetInsertionQtyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetInsertionQtyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetInsertionQtyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void UpdateCamstarStatusCompletedEventHandler(object sender, UpdateCamstarStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateCamstarStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateCamstarStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591